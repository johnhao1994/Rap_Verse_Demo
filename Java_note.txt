异常：
是对问题的描述，将问题进行对象的封装
-----------------------------------------------------------
异常体系：
		Throwable
			--Error
			--Exception
				--RuntimeException

异常体系的特点：异常体系中的所有类及建立的对象都具备可抛性
可以被throw和throws关键字操作
throw定义在函数内
throws定义在函数上，可抛出多个异常，用逗号隔开


当函数内容有throw抛出异常对象，并未进行catch处理，必须要在函数上声明(即有throws)，否则编译失败
注意，RuntimeException除外，也就是函数如果抛出的是RuntimeException异常，函数上可以不用声明
-------------------------------------------------------------------------------------------------
如果函数声明了异常，调用者需要处理（try或者throws）

异常有两种：
			编译时被检测异常
				该异常在编译时，如果没有处理，编译失败
				该异常被表示，代表者可以被处理
			运行时异常（编译时不检测）
				在编译时不需要处理，编译不检查
				该异常的发生建议不处理，让程序停止，需要对代码进行修正
-------------------------------------------------------------------------------------------------------
处理异常的方式：
1.
try                   
{
}
catch()
{
}
2.
try
{
}
finally
{
}
3.
try
{
}
catch
{
}
				
注意：
1.对于处理异常代码的finally是一定会执行的，通常在里面定义的是关闭资源代码，因为资源必须释放
2.finally只有一种情况不会执行，当执行到System.exit(0);表示虚拟机直接结束，就不会执行finally中的代码，
----------------------------------------------------------------------------------
自定义异常
	定义类一般继承Exception或者RuntimeException
	1.为了让该自定义类具有可抛性
	2.让该类具备操作异常的共性方法
	
	当要自定义异常的信息时，可以使用父类已经定义好的功能，异常信息传递给父类的构造函数
	
	class Myexception extends Exception
	{
		Myexception(String message)
		{
			super(message);
		}
	}
	
自定义异常是按照java的面向对象思想，将程序中的特有问题进行封装
----------------------------------------------------------------------------------------------
异常的好处：
1.将问题进行封装
2.将正常流程代码和问题处理代码相分离，方便阅读

---------------------------------------------------------------------------------------
异常处理原则：
	1.调用到抛出异常的功能时，抛出几个，就catch几个
	2.多个catch，父类的catch放到最下面
	3.catch内要定义针对性的处理方式，不要定义简单的输出语句，可以输出到异常日志

	当捕获到的异常，本功能处理不了时，可以继续在catch中抛出
	try
	{
		throw new AException();
	}
	catch (AException e)
	{
		throw e;
	}
	如果该异常处理不了，但并不属于该功能出现的异常，可以将异常转换后在抛出和功能相关的异常
	
	或者异常可以处理，需要将异常产生的和本功能相关的问题提供出去，让调用者知道，并处理
		try
	{
		throw new AException();
	}
	catch (AException e)
	{
		throw new Bexception;
	}	
------------------------------------------------------------------------------------------------
异常的注意事项：
在子父类覆盖时：
	1.子类抛出的异常必须是父类的异常的子类或者子集
	2.如果父类或者接口没有异常抛出，子类覆盖出现异常只能try不能抛
-----------------------------------------------------------------------------------------------------
重要例子1：

1.老师用电脑上课
分析：
创建老师对象，校长调用老师的讲课方法-->老师对象调用电脑的运行方法-->

-->1.如果电脑出现蓝屏异常则重启

-->2.如果电脑出现冒烟异常,老师处理不了，调用布置练习方法并抛出课时无法按时完成异常

-->校长catch到老师的课时无法按时完成的异常，进行换老师操作

class BluescreenException extends Exception
{
	BluescreenException(String message)
	{
		super(message);
	}
}

class SmoingException extends Exception
{	
	SmoingException(String message)
	{
		super(message);
	}
}

class NoPlanException extends Exception
{
	NoPlanException(String msg)
	{
		super(msg);
	}
}

class Computer
{	private int state = 1;
	public void run() throws BluescreenException,SmoingException
	{	if(state == 2)
		{
			throw new BluescreenException("蓝屏了");
		}
		if(state == 3)
		{
			throw new SmoingException("冒烟了")；
		}
		System.out.println("电脑运行")；
	}
	public void restart()
	{	
		state = 1;
		System.out.println("电脑重启")；
	}
}

class Teacher
{
	private String name;
	Teacher(String name)
	{	
		this.name = name;
		cmpt = new Computer();
	}
	public void prelect() throws NoPlanException
	{	
		try
		{
			cmpt.run();
		}
		catch(BluescreenException e)
		{
			cmpt.restart()
		}
		catch(SmoingException e)
		{	
			test();
			throw new NoPlanException("课时无法继续"+e.getMessage());
		}
		System.out.println("开始讲课")；
	}
	public void test()
	{
		System.out.println("练习")；
	}
	
}

class ExceptionTest
{
	public static void main(String[] args)
	{
		Teacher t = new Teacher("毕老师")；
		try
		{
			t.prelect();
		}
		catch(NoPlanException e)
		{
			System.out.println(e.toString);
			System.out.println("换老师")；
		}
	}	
}
-------------------------------------------------------------------------------------------------------------
重要例子2：


如果出现非法数值，后面的运算与操作没有意义要让程序立即停掉，
interface Graph
{
	void getArea();
}

class illeagleException extends RuntimeException
{
	illeagleException(string message)
	{
		super(message);
	}
}
class Rec implements Graph
{
	private int len,wid;
	Rec(int len,int wid)
	{	if(len <= 0 || wid <= 0)
		{
			throw new illeagleException("出现非法值")；
		}
		this.len = len;
		this.wid = wid;
	}
	public void getArea()
	{
		System.out.println(len*wid);
	}
}

class Cicle implements Graph
{
	private int radius;
	public static final PI = 3.14;
	Circle(int radius)
	{	
		if (radius <= 0)
		{
			throw illeagleException("出现非法值")；
		}
		this.radius = radius;
		
	}
	public void getArea
	{
		System.out.println(radius*radius*PI)
	}
}
class ExceptionTest2
{
		public static void main(String[] args)
		{
				Rec r = new Rec(3,4);
				r.getArea();
		}
}

B C  
